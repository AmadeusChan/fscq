To build fscq, use a version of Coq v8.5; for now, this seems to mean
building Coq from source:

  git clone -b v8.5 https://github.com/coq/coq.git

As one reference point, commit dda6d8f6 seems to produce a working
version of Coq that builds fscq.

To develop Coq code using CoqIDE, check out coqide.sh, which invokes
coqide with the appropriate arguments for spawning many parallel coqtop
processes and setting the right logical-to-physical path mappings.

Use GHC 8.0.1 to build the Haskell-extracted code.  On Ubuntu, this
means running this as root:

  add-apt-repository ppa:hvr/ghc
  apt-get update
  apt-get install ghc-8.0.1-prof

  echo 'library-profiling: True' >> ~/.cabal/config
  cabal user-config update
  PATH=/opt/ghc/8.0.1/bin:$PATH cabal install cryptohash

You also need to install headers for FUSE:

  apt-get install libfuse-dev

To build the Ocaml extracted code, install the following Ocaml libraries:

  apt-get install libextunix-ocaml-dev libzarith-ocaml-dev

To run the fuse fscq:

  mkdir /tmp/fscq
  ./mkfs disk.img
  ./fuse disk.img -f /tmp/fscq &

To use fscq:

  echo hello > /tmp/fscq/h.txt
  cat h.txt
  ls /tmp/fscq/
  etc.

To see stats:

  cat /tmp/fscq/stats

To unmount:

  fusermount -u /tmp/fscq

To run benchmarks, see bench/

To produce Go code, use Go 1.4+ (it's faster and has a better GC).
