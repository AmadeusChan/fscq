- factor out on-disk list code from MemLog
- bigger log (more than one descriptor block)
- prove end-to-end theorem about mkfs
- double-indirect blocks
- byte-level read/write
- deleting a file should free its data blocks
- non-journaled data writes (file fsync)
- asynchronous metadata updates (directory fsync)
- extraction without Haskell
- integrate into MirageOS unikernel by extracting to OCaml
- extraction into Go to combine with Biscuit
- migrate to Coq 8.5
- better syntax for predicates (from paper)
- better automation support for words
- better automation support for stopping at well-defined points
- integrate error codes (Errno.v)
- combine Verdi's Paxos with FSCQ for stable storage, prove end-to-end theorem
  under both network and node failures (how to combine different spec styles??)
- add security to fscq specs (something better than ACLs; maybe capsicum?)
- provably secure sandbox on top of fscq
